// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;  // use the Armadillo library for matrix computations


// creasteSS_Rcpp
List creasteSS_Rcpp(IntegerVector lab, mat datx);
RcppExport SEXP _hclda_creasteSS_Rcpp(SEXP labSEXP, SEXP datxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lab(labSEXP);
    Rcpp::traits::input_parameter< mat >::type datx(datxSEXP);
    rcpp_result_gen = Rcpp::wrap(creasteSS_Rcpp(lab, datx));
    return rcpp_result_gen;
END_RCPP
}
// computeY_Rcpp
mat computeY_Rcpp(int N, int G, int p, double r, mat W, mat B, mat bar_x, vec barx, uvec n_g);
RcppExport SEXP _hclda_computeY_Rcpp(SEXP NSEXP, SEXP GSEXP, SEXP pSEXP, SEXP rSEXP, SEXP WSEXP, SEXP BSEXP, SEXP bar_xSEXP, SEXP barxSEXP, SEXP n_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< mat >::type bar_x(bar_xSEXP);
    Rcpp::traits::input_parameter< vec >::type barx(barxSEXP);
    Rcpp::traits::input_parameter< uvec >::type n_g(n_gSEXP);
    rcpp_result_gen = Rcpp::wrap(computeY_Rcpp(N, G, p, r, W, B, bar_x, barx, n_g));
    return rcpp_result_gen;
END_RCPP
}
// creasteSS_fast_Rcpp
List creasteSS_fast_Rcpp(IntegerVector lab, mat datx, double r);
RcppExport SEXP _hclda_creasteSS_fast_Rcpp(SEXP labSEXP, SEXP datxSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lab(labSEXP);
    Rcpp::traits::input_parameter< mat >::type datx(datxSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(creasteSS_fast_Rcpp(lab, datx, r));
    return rcpp_result_gen;
END_RCPP
}
// loo_CLD_Rcpp
List loo_CLD_Rcpp(mat test_dat, IntegerVector test_lab, mat train_dat, IntegerVector train_lab, double r, int N_press, mat bar_x, vec barx, List xjxjT, mat W, List S_x, mat sum_nj_xjbar_xjbar_T);
RcppExport SEXP _hclda_loo_CLD_Rcpp(SEXP test_datSEXP, SEXP test_labSEXP, SEXP train_datSEXP, SEXP train_labSEXP, SEXP rSEXP, SEXP N_pressSEXP, SEXP bar_xSEXP, SEXP barxSEXP, SEXP xjxjTSEXP, SEXP WSEXP, SEXP S_xSEXP, SEXP sum_nj_xjbar_xjbar_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type test_dat(test_datSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type test_lab(test_labSEXP);
    Rcpp::traits::input_parameter< mat >::type train_dat(train_datSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type train_lab(train_labSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type N_press(N_pressSEXP);
    Rcpp::traits::input_parameter< mat >::type bar_x(bar_xSEXP);
    Rcpp::traits::input_parameter< vec >::type barx(barxSEXP);
    Rcpp::traits::input_parameter< List >::type xjxjT(xjxjTSEXP);
    Rcpp::traits::input_parameter< mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< List >::type S_x(S_xSEXP);
    Rcpp::traits::input_parameter< mat >::type sum_nj_xjbar_xjbar_T(sum_nj_xjbar_xjbar_TSEXP);
    rcpp_result_gen = Rcpp::wrap(loo_CLD_Rcpp(test_dat, test_lab, train_dat, train_lab, r, N_press, bar_x, barx, xjxjT, W, S_x, sum_nj_xjbar_xjbar_T));
    return rcpp_result_gen;
END_RCPP
}
// fast_loo_CLD_Rcpp
List fast_loo_CLD_Rcpp(int p, int cv, IntegerVector test_lab, mat test_dat, IntegerVector train_lab, double hii, rowvec hat_Y_rowvec, rowvec Y_rowvec, mat alpha, vec ci_colvec, vec sum_hatY2, rowvec sum_hY_H_rowvec, double sum_H2_double, mat sum_hatY_j, vec sum_H_j_i, mat bar_x, int N_press, double r);
RcppExport SEXP _hclda_fast_loo_CLD_Rcpp(SEXP pSEXP, SEXP cvSEXP, SEXP test_labSEXP, SEXP test_datSEXP, SEXP train_labSEXP, SEXP hiiSEXP, SEXP hat_Y_rowvecSEXP, SEXP Y_rowvecSEXP, SEXP alphaSEXP, SEXP ci_colvecSEXP, SEXP sum_hatY2SEXP, SEXP sum_hY_H_rowvecSEXP, SEXP sum_H2_doubleSEXP, SEXP sum_hatY_jSEXP, SEXP sum_H_j_iSEXP, SEXP bar_xSEXP, SEXP N_pressSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type cv(cvSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type test_lab(test_labSEXP);
    Rcpp::traits::input_parameter< mat >::type test_dat(test_datSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type train_lab(train_labSEXP);
    Rcpp::traits::input_parameter< double >::type hii(hiiSEXP);
    Rcpp::traits::input_parameter< rowvec >::type hat_Y_rowvec(hat_Y_rowvecSEXP);
    Rcpp::traits::input_parameter< rowvec >::type Y_rowvec(Y_rowvecSEXP);
    Rcpp::traits::input_parameter< mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< vec >::type ci_colvec(ci_colvecSEXP);
    Rcpp::traits::input_parameter< vec >::type sum_hatY2(sum_hatY2SEXP);
    Rcpp::traits::input_parameter< rowvec >::type sum_hY_H_rowvec(sum_hY_H_rowvecSEXP);
    Rcpp::traits::input_parameter< double >::type sum_H2_double(sum_H2_doubleSEXP);
    Rcpp::traits::input_parameter< mat >::type sum_hatY_j(sum_hatY_jSEXP);
    Rcpp::traits::input_parameter< vec >::type sum_H_j_i(sum_H_j_iSEXP);
    Rcpp::traits::input_parameter< mat >::type bar_x(bar_xSEXP);
    Rcpp::traits::input_parameter< int >::type N_press(N_pressSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_loo_CLD_Rcpp(p, cv, test_lab, test_dat, train_lab, hii, hat_Y_rowvec, Y_rowvec, alpha, ci_colvec, sum_hatY2, sum_hY_H_rowvec, sum_H2_double, sum_hatY_j, sum_H_j_i, bar_x, N_press, r));
    return rcpp_result_gen;
END_RCPP
}
// cv_Rcpp
List cv_Rcpp(mat datx, IntegerVector lab, double r, int N_press, List SS_prime, CharacterVector type);
RcppExport SEXP _hclda_cv_Rcpp(SEXP datxSEXP, SEXP labSEXP, SEXP rSEXP, SEXP N_pressSEXP, SEXP SS_primeSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type datx(datxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lab(labSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type N_press(N_pressSEXP);
    Rcpp::traits::input_parameter< List >::type SS_prime(SS_primeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_Rcpp(datx, lab, r, N_press, SS_prime, type));
    return rcpp_result_gen;
END_RCPP
}
// cv_clustering_Rcpp
List cv_clustering_Rcpp(mat datx, IntegerVector lab, IntegerVector lab_for, double r, int N_press, List SS_for, CharacterVector Cluster, CharacterVector type);
RcppExport SEXP _hclda_cv_clustering_Rcpp(SEXP datxSEXP, SEXP labSEXP, SEXP lab_forSEXP, SEXP rSEXP, SEXP N_pressSEXP, SEXP SS_forSEXP, SEXP ClusterSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type datx(datxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lab(labSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lab_for(lab_forSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type N_press(N_pressSEXP);
    Rcpp::traits::input_parameter< List >::type SS_for(SS_forSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type Cluster(ClusterSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_clustering_Rcpp(datx, lab, lab_for, r, N_press, SS_for, Cluster, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hclda_creasteSS_Rcpp", (DL_FUNC) &_hclda_creasteSS_Rcpp, 2},
    {"_hclda_computeY_Rcpp", (DL_FUNC) &_hclda_computeY_Rcpp, 9},
    {"_hclda_creasteSS_fast_Rcpp", (DL_FUNC) &_hclda_creasteSS_fast_Rcpp, 3},
    {"_hclda_loo_CLD_Rcpp", (DL_FUNC) &_hclda_loo_CLD_Rcpp, 12},
    {"_hclda_fast_loo_CLD_Rcpp", (DL_FUNC) &_hclda_fast_loo_CLD_Rcpp, 18},
    {"_hclda_cv_Rcpp", (DL_FUNC) &_hclda_cv_Rcpp, 6},
    {"_hclda_cv_clustering_Rcpp", (DL_FUNC) &_hclda_cv_clustering_Rcpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_hclda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
